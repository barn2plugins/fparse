{"version":3,"file":"fparser.js","sources":["../src/fparser.ts"],"sourcesContent":["/**\n * JS Formula Parser\n * -------------------\n * (c) 2012-2023 Alexander Schenkel, alex@alexi.ch\n *\n * JS Formula Parser takes a string, parses its mathmatical formula\n * and creates an evaluatable Formula object of it.\n *\n * Example input:\n *\n * var fObj = new Formula('sin(PI*x)/(2*PI)');\n * var result = fObj.evaluate({x: 2});\n * var results = fObj.evaluate([\n *     {x: 2},\n *     {x: 4},\n *     {x: 8}\n * ]);\n *\n * LICENSE:\n * -------------\n * MIT license, see LICENSE file\n */\nconst MATH_CONSTANTS = {\n    PI: Math.PI,\n    E: Math.E,\n    LN2: Math.LN2,\n    LN10: Math.LN10,\n    LOG2E: Math.LOG2E,\n    LOG10E: Math.LOG10E,\n    SQRT1_2: Math.SQRT1_2,\n    SQRT2: Math.SQRT2\n};\n\ndeclare global {\n    interface Math {\n        [key: string]: number | Function;\n    }\n}\n\ntype FormulaOptions = {\n    memoization?: boolean;\n};\n\ntype ValueObject = {\n    [key: string]: number | Function | ValueObject;\n};\n\nclass Expression {\n    static createOperatorExpression(operator: string, left: Expression, right: Expression) {\n        if (operator === '^') {\n            return new PowerExpression(left, right);\n        }\n        if (operator === '*' || operator === '/') {\n            return new MultDivExpression(operator, left, right);\n        }\n        if (operator === '+' || operator === '-') {\n            return new PlusMinusExpression(operator, left, right);\n        }\n        throw new Error(`Unknown operator: ${operator}`);\n    }\n\n    evaluate(params: ValueObject = {}): number {\n        throw new Error('Empty Expression - Must be defined in child classes');\n    }\n\n    toString() {\n        return '';\n    }\n}\n\nclass BracketExpression extends Expression {\n    innerExpression: Expression;\n\n    constructor(expr: Expression) {\n        super();\n        this.innerExpression = expr;\n        if (!(this.innerExpression instanceof Expression)) {\n            throw new Error('No inner expression given for bracket expression');\n        }\n    }\n    evaluate(params = {}): number {\n        return this.innerExpression.evaluate(params);\n    }\n    toString() {\n        return `(${this.innerExpression.toString()})`;\n    }\n}\n\nclass ValueExpression extends Expression {\n    value: number;\n\n    constructor(value: number | string) {\n        super();\n        this.value = Number(value);\n        if (isNaN(this.value)) {\n            throw new Error('Cannot parse number: ' + value);\n        }\n    }\n    evaluate(): number {\n        return this.value;\n    }\n    toString() {\n        return String(this.value);\n    }\n}\n\nclass PlusMinusExpression extends Expression {\n    operator: string;\n    left: Expression;\n    right: Expression;\n\n    constructor(operator: string, left: Expression, right: Expression) {\n        super();\n        if (!['+', '-'].includes(operator)) {\n            throw new Error(`Operator not allowed in Plus/Minus expression: ${operator}`);\n        }\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n\n    evaluate(params: ValueObject = {}): number {\n        if (this.operator === '+') {\n            return this.left.evaluate(params) + this.right.evaluate(params);\n        }\n        if (this.operator === '-') {\n            return this.left.evaluate(params) - this.right.evaluate(params);\n        }\n        throw new Error('Unknown operator for PlusMinus expression');\n    }\n\n    toString() {\n        return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;\n    }\n}\n\nclass MultDivExpression extends Expression {\n    operator: string;\n    left: Expression;\n    right: Expression;\n\n    constructor(operator: string, left: Expression, right: Expression) {\n        super();\n        if (!['*', '/'].includes(operator)) {\n            throw new Error(`Operator not allowed in Multiply/Division expression: ${operator}`);\n        }\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n\n    evaluate(params: ValueObject = {}): number {\n        if (this.operator === '*') {\n            return this.left.evaluate(params) * this.right.evaluate(params);\n        }\n        if (this.operator === '/') {\n            return this.left.evaluate(params) / this.right.evaluate(params);\n        }\n        throw new Error('Unknown operator for MultDiv expression');\n    }\n\n    toString() {\n        return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;\n    }\n}\n\nclass PowerExpression extends Expression {\n    base: Expression;\n    exponent: Expression;\n\n    constructor(base: Expression, exponent: Expression) {\n        super();\n        this.base = base;\n        this.exponent = exponent;\n    }\n\n    evaluate(params: ValueObject = {}): number {\n        return Math.pow(this.base.evaluate(params), this.exponent.evaluate(params));\n    }\n\n    toString() {\n        return `${this.base.toString()}^${this.exponent.toString()}`;\n    }\n}\nclass FunctionExpression extends Expression {\n    fn: string;\n    varPath: string[];\n    argumentExpressions: Expression[];\n    formulaObject: Formula | null;\n    blacklisted: boolean | undefined;\n\n    constructor(fn: string | null, argumentExpressions: Expression[], formulaObject: Formula | null = null) {\n        super();\n        this.fn = fn ?? '';\n        this.varPath = this.fn.split('.');\n        this.argumentExpressions = argumentExpressions || [];\n        this.formulaObject = formulaObject;\n        this.blacklisted = undefined;\n    }\n\n    evaluate(params: ValueObject = {}): number {\n        params = params || {};\n        const paramValues = this.argumentExpressions.map((a) => a.evaluate(params));\n\n        // If the params object itself has a function definition with\n        // the function name, call this one:\n        // let fn = params[this.fn];\n        try {\n            let fn = getProperty(params, this.varPath, this.fn);\n            if (fn instanceof Function) {\n                return fn.apply(this, paramValues);\n            }\n        } catch (e) {\n            // pass: getProperty has found nothing, which throws an error, but\n            // we need to continue\n        }\n\n        let objFn;\n        try {\n            // perhaps the Formula object has the function? so call it:\n            objFn = getProperty(this.formulaObject ?? {}, this.varPath, this.fn);\n        } catch (e) {\n            // pass: getProperty has found nothing, which throws an error, but\n            // we need to continue\n        }\n        if (this.formulaObject && objFn instanceof Function) {\n            // Don't, if it is blacklisted:\n            if (this.isBlacklisted()) {\n                throw new Error('Blacklisted function called: ' + this.fn);\n            }\n            return objFn.apply(this.formulaObject, paramValues);\n        }\n\n        try {\n            // Has the JS Math object a function as requested? Call it:\n            const mathFn = getProperty(Math, this.varPath, this.fn);\n            if (mathFn instanceof Function) {\n                return mathFn.apply(this, paramValues);\n            }\n        } catch (e) {\n            // pass: getProperty has found nothing, which throws an error, but\n            // we need to continue\n        }\n        // No more options left: sorry!\n        throw new Error('Function not found: ' + this.fn);\n    }\n\n    toString() {\n        return `${this.fn}(${this.argumentExpressions.map((a) => a.toString()).join(', ')})`;\n    }\n\n    isBlacklisted() {\n        // cache evaluation of blacklisted function, to save call time:\n        if (this.blacklisted === undefined) {\n            this.blacklisted = Formula.functionBlacklist.includes(\n                this.formulaObject ? this.formulaObject[this.fn] : null\n            );\n        }\n        return this.blacklisted;\n    }\n}\n\nfunction getProperty(object: ValueObject, path: string[], fullPath: string) {\n    let curr: number | Function | ValueObject = object;\n    for (let propName of path) {\n        if (typeof curr !== 'object') {\n            throw new Error(`Cannot evaluate ${propName}, property not found (from path ${fullPath})`);\n        }\n        if (curr[propName] === undefined) {\n            throw new Error(`Cannot evaluate ${propName}, property not found (from path ${fullPath})`);\n        }\n        curr = curr[propName];\n    }\n\n    if (typeof curr === 'object') {\n        throw new Error('Invalid value');\n    }\n\n    return curr;\n}\n\nclass VariableExpression extends Expression {\n    fullPath: string;\n    varPath: string[];\n    formulaObject: Formula | null;\n\n    constructor(fullPath: string, formulaObj: Formula | null = null) {\n        super();\n        this.formulaObject = formulaObj;\n        this.fullPath = fullPath;\n        this.varPath = fullPath.split('.');\n    }\n\n    evaluate(params = {}) {\n        // params contain variable / value pairs: If this object's variable matches\n        // a varname found in the params, return the value.\n        // eg: params = {x: 5,y:3}, varname = x, return 5\n        // Objects and arrays are also supported:\n        // e.g. params = {x: {y: 5}}, varname = x.y, return 5\n        //  or  params = {x: [2,4,6]}, varname = x.2, return 6\n\n        // Let's look in the value object first:\n        let value = undefined;\n        try {\n            value = getProperty(params, this.varPath, this.fullPath);\n        } catch (e) {\n            // pass: getProperty has found nothing, which throws an error, but\n            // we need to continue\n        }\n        if (value === undefined) {\n            // Now have a look at the formula object:\n            // This will throw an error if the property is not found:\n            value = getProperty(this.formulaObject ?? {}, this.varPath, this.fullPath);\n        }\n        if (typeof value === 'function' || typeof value === 'object') {\n            throw new Error(`Cannot use ${this.fullPath} as value: It contains a non-numerical value.`);\n        }\n\n        return Number(value);\n    }\n    toString() {\n        return `${this.varPath.join('.')}`;\n    }\n}\n\nexport default class Formula {\n    [key: string]: any;\n    static Expression = Expression;\n    static BracketExpression = BracketExpression;\n    static PowerExpression = PowerExpression;\n    static MultDivExpression = MultDivExpression;\n    static PlusMinusExpression = PlusMinusExpression;\n    static ValueExpression = ValueExpression;\n    static VariableExpression = VariableExpression;\n    static FunctionExpression = FunctionExpression;\n    static MATH_CONSTANTS = MATH_CONSTANTS;\n\n    // Create a function blacklist:\n    static functionBlacklist = Object.getOwnPropertyNames(Formula.prototype)\n        .filter((prop) => Formula.prototype[prop] instanceof Function)\n        .map((prop) => Formula.prototype[prop]);\n\n    public formulaExpression: Expression | null;\n    public options: FormulaOptions;\n    public formulaStr: string;\n    private _variables: string[];\n    private _memory: { [key: string]: number };\n\n    /**\n     * Creates a new Formula instance\n     *\n     * Optional configuration can be set in the options object:\n     *\n     * - memoization (bool): If true, results are stored and re-used when evaluate() is called with the same parameters\n     *\n     * @param {String} fStr The formula string, e.g. 'sin(x)/cos(y)'\n     * @param {Object} options An options object. Supported options:\n     *    - memoization (bool): If true, results are stored and re-used when evaluate() is called with the same parameters\n     * @param {Formula} parentFormula Internally used to build a Formula AST\n     */\n    constructor(fStr: string, options: FormulaOptions | null = {}) {\n        this.formulaExpression = null;\n        this.options = { ...{ memoization: false }, ...options };\n        this.formulaStr = '';\n        this._variables = [];\n        this._memory = {};\n        this.setFormula(fStr);\n    }\n\n    /**\n     * Re-sets the given String and parses it to a formula expression. Can be used after initialization,\n     * to re-use the Formula object.\n     *\n     * @param {String} formulaString The formula string to set/parse\n     * @return {this} The Formula object (this)\n     */\n    setFormula(formulaString: string) {\n        if (formulaString) {\n            this.formulaExpression = null;\n            this._variables = [];\n            this._memory = {};\n            this.formulaStr = formulaString;\n            this.formulaExpression = this.parse(formulaString);\n        }\n        return this;\n    }\n\n    /**\n     * Enable memoization: An expression is only evaluated once for the same input.\n     * Further evaluations with the same input will return the in-memory stored result.\n     */\n    enableMemoization() {\n        this.options.memoization = true;\n    }\n\n    /**\n     * Disable in-memory memoization: each call to evaluate() is executed from scratch.\n     */\n    disableMemoization() {\n        this.options.memoization = false;\n        this._memory = {};\n    }\n\n    /**\n     * Splits the given string by ',', makes sure the ',' is not within\n     * a sub-expression\n     * e.g.: str = \"x,pow(3,4)\" returns 2 elements: x and pow(3,4).\n     */\n    splitFunctionParams(toSplit: string) {\n        // do not split on ',' within matching brackets.\n        let pCount = 0,\n            paramStr = '';\n        const params = [];\n        for (let chr of toSplit.split('')) {\n            if (chr === ',' && pCount === 0) {\n                // Found function param, save 'em\n                params.push(paramStr);\n                paramStr = '';\n            } else if (chr === '(') {\n                pCount++;\n                paramStr += chr;\n            } else if (chr === ')') {\n                pCount--;\n                paramStr += chr;\n                if (pCount < 0) {\n                    throw new Error('ERROR: Too many closing parentheses!');\n                }\n            } else {\n                paramStr += chr;\n            }\n        }\n        if (pCount !== 0) {\n            throw new Error('ERROR: Too many opening parentheses!');\n        }\n        if (paramStr.length > 0) {\n            params.push(paramStr);\n        }\n        return params;\n    }\n\n    /**\n     * Cleans the input string from unnecessary whitespace,\n     * and replaces some known constants:\n     */\n    cleanupInputString(s: string) {\n        s = s.replace(/\\s+/g, '');\n        // surround known math constants with [], to parse them as named variables [xxx]:\n        Object.keys(MATH_CONSTANTS).forEach((c) => {\n            s = s.replace(new RegExp(`\\\\b${c}\\\\b`, 'g'), `[${c}]`);\n        });\n        return s;\n    }\n\n    /**\n     * Parses the given formula string by using a state machine into a single Expression object,\n     * which represents an expression tree (aka AST).\n     *\n     * First, we split the string into 'expression': An expression can be:\n     *   - a number, e.g. '3.45'\n     *   - an unknown variable, e.g. 'x'\n     *   - a single char operator, such as '*','+' etc...\n     *   - a named variable, in [], e.g. [myvar]\n     *   - a function, such as sin(x)\n     *   - a parenthessed expression, containing other expressions\n     *\n     * We want to create an expression tree out of the string. This is done in 2 stages:\n     * 1. form single expressions from the string: parse the string into known expression objects:\n     *   - numbers/variables\n     *   - operators\n     *   - braces (with a sub-expression)\n     *   - functions (with sub-expressions (aka argument expressions))\n     *   This will lead to an array of expressions.\n     *  As an example:\n     *  \"2 + 3 * (4 + 3 ^ 5) * sin(PI * x)\" forms an array of the following expressions:\n     *  `[2, +, 3, *, bracketExpr(4,+,3,^,5), * , functionExpr(PI,*,x)]`\n     * 2. From the raw expression array we form an expression tree by evaluating the expressions in the correct order:\n     *    e.g.:\n     *  the expression array `[2, +, 3, *, bracketExpr(4,+,3,^,5), * , functionExpr(PI,*,x)]` will be transformed into the expression tree:\n     *  ```\n     *         root expr:  (+)\n     *                     / \\\n     *                    2    (*)\n     *                        / \\\n     *                     (*)  functionExpr(...)\n     *                     / \\\n     *                    3   (bracket(..))\n     * ```\n     *\n     * In the end, we have a single root expression node, which then can be evaluated in the evaluate() function.\n     *\n     * @param {String} str The formula string, e.g. '3*sin(PI/x)'\n     * @returns {Expression} An expression object, representing the expression tree\n     */\n    parse(str: string) {\n        // clean the input string first. spaces, math constant replacements etc.:\n        str = this.cleanupInputString(str);\n        // start recursive call to parse:\n        return this._do_parse(str);\n    }\n\n    /**\n     * @see parse(): this is the recursive parse function, without the clean string part.\n     * @param {String} str\n     * @returns {Expression} An expression object, representing the expression tree\n     */\n    _do_parse(str: string): Expression {\n        let lastChar = str.length - 1,\n            act = 0,\n            state:\n                | 'initial'\n                | 'within-nr'\n                | 'within-parentheses'\n                | 'within-func-parentheses'\n                | 'within-named-var'\n                | 'within-expr'\n                | 'within-bracket'\n                | 'within-func'\n                | 'invalid' = 'initial',\n            expressions = [],\n            char = '',\n            tmp = '',\n            funcName = null,\n            pCount = 0;\n\n        while (act <= lastChar) {\n            switch (state) {\n                case 'initial':\n                    // None state, the beginning. Read a char and see what happens.\n                    char = str.charAt(act);\n                    if (char.match(/[0-9.]/)) {\n                        // found the beginning of a number, change state to \"within-number\"\n                        state = 'within-nr';\n                        tmp = '';\n                        act--;\n                    } else if (this.isOperator(char)) {\n                        // Simple operators. Note: '-' must be treaten specially,\n                        // it could be part of a number.\n                        // it MUST be part of a number if the last found expression\n                        // was an operator (or the beginning):\n                        if (char === '-') {\n                            if (expressions.length === 0 || this.isOperatorExpr(expressions[expressions.length - 1])) {\n                                state = 'within-nr';\n                                tmp = '-';\n                                break;\n                            }\n                        }\n\n                        // Found a simple operator, store as expression:\n                        if (act === lastChar || this.isOperatorExpr(expressions[expressions.length - 1])) {\n                            state = 'invalid'; // invalid to end with an operator, or have 2 operators in conjunction\n                            break;\n                        } else {\n                            expressions.push(\n                                Expression.createOperatorExpression(char, new Expression(), new Expression())\n                            );\n                            state = 'initial';\n                        }\n                    } else if (char === '(') {\n                        // left parenthes found, seems to be the beginning of a new sub-expression:\n                        state = 'within-parentheses';\n                        tmp = '';\n                        pCount = 0;\n                    } else if (char === '[') {\n                        // left named var separator char found, seems to be the beginning of a named var:\n                        state = 'within-named-var';\n                        tmp = '';\n                    } else if (char.match(/[a-zA-Z]/)) {\n                        // multiple chars means it may be a function, else its a var which counts as own expression:\n                        if (act < lastChar && str.charAt(act + 1).match(/[a-zA-Z0-9_.]/)) {\n                            tmp = char;\n                            state = 'within-func';\n                        } else {\n                            // Single variable found:\n                            // We need to check some special considerations:\n                            // - If the last char was a number (e.g. 3x), we need to create a multiplication out of it (3*x)\n                            if (\n                                expressions.length > 0 &&\n                                expressions[expressions.length - 1] instanceof ValueExpression\n                            ) {\n                                expressions.push(\n                                    Expression.createOperatorExpression('*', new Expression(), new Expression())\n                                );\n                            }\n                            expressions.push(new VariableExpression(char, this));\n                            this.registerVariable(char);\n                            state = 'initial';\n                            tmp = '';\n                        }\n                    }\n                    break;\n                case 'within-nr':\n                    char = str.charAt(act);\n                    if (char.match(/[0-9.]/)) {\n                        //Still within number, store and continue\n                        tmp += char;\n                        if (act === lastChar) {\n                            expressions.push(new ValueExpression(tmp));\n                            state = 'initial';\n                        }\n                    } else {\n                        // Number finished on last round, so add as expression:\n                        if (tmp === '-') {\n                            // just a single '-' means: a variable could follow (e.g. like in 3*-x), we convert it to -1: (3*-1x)\n                            tmp = '-1';\n                        }\n                        expressions.push(new ValueExpression(tmp));\n                        tmp = '';\n                        state = 'initial';\n                        act--;\n                    }\n                    break;\n\n                case 'within-func':\n                    char = str.charAt(act);\n                    if (char.match(/[a-zA-Z0-9_.]/)) {\n                        tmp += char;\n                    } else if (char === '(') {\n                        funcName = tmp;\n                        tmp = '';\n                        pCount = 0;\n                        state = 'within-func-parentheses';\n                    } else {\n                        throw new Error('Wrong character for function at position ' + act);\n                    }\n\n                    break;\n\n                case 'within-named-var':\n                    char = str.charAt(act);\n                    if (char === ']') {\n                        // end of named var, create expression:\n                        expressions.push(new VariableExpression(tmp, this));\n                        this.registerVariable(tmp);\n                        tmp = '';\n                        state = 'initial';\n                    } else if (char.match(/[a-zA-Z0-9_.]/)) {\n                        tmp += char;\n                    } else {\n                        throw new Error('Character not allowed within named variable: ' + char);\n                    }\n                    break;\n\n                case 'within-parentheses':\n                case 'within-func-parentheses':\n                    char = str.charAt(act);\n                    if (char === ')') {\n                        //Check if this is the matching closing parenthesis.If not, just read ahead.\n                        if (pCount <= 0) {\n                            // Yes, we found the closing parenthesis, create new sub-expression:\n                            if (state === 'within-parentheses') {\n                                expressions.push(new BracketExpression(this._do_parse(tmp)));\n                            } else if (state === 'within-func-parentheses') {\n                                // Function found: create expressions from the inner argument\n                                // string, and create a function expression with it:\n                                let args = this.splitFunctionParams(tmp).map((a) => this._do_parse(a));\n                                expressions.push(new FunctionExpression(funcName, args, this));\n                                funcName = null;\n                            }\n                            state = 'initial';\n                        } else {\n                            pCount--;\n                            tmp += char;\n                        }\n                    } else if (char === '(') {\n                        // begin of a new sub-parenthesis, increase counter:\n                        pCount++;\n                        tmp += char;\n                    } else {\n                        // all other things are just added to the sub-expression:\n                        tmp += char;\n                    }\n                    break;\n            }\n            act++;\n        }\n\n        if (state !== 'initial') {\n            throw new Error('Could not parse formula: Syntax error.');\n        }\n\n        return this.buildExpressionTree(expressions);\n    }\n\n    /**\n     * @see parse(): Builds an expression tree from the given expression array.\n     * Builds a tree with a single root expression in the correct order of operator precedence.\n     *\n     * Note that the given expression objects are modified and linked.\n     *\n     * @param {*} expressions\n     * @return {Expression} The root Expression of the built expression tree\n     */\n    buildExpressionTree(expressions: Expression[]): Expression {\n        if (expressions.length < 1) {\n            throw new Error('No expression given!');\n        }\n        const exprCopy = [...expressions];\n        let idx = 0;\n        let expr = null;\n        // Replace all Power expressions with a partial tree:\n        while (idx < exprCopy.length) {\n            expr = exprCopy[idx];\n            if (expr instanceof PowerExpression) {\n                if (idx === 0 || idx === exprCopy.length - 1) {\n                    throw new Error('Wrong operator position!');\n                }\n                expr.base = exprCopy[idx - 1];\n                expr.exponent = exprCopy[idx + 1];\n                exprCopy[idx - 1] = expr;\n                exprCopy.splice(idx, 2);\n            } else {\n                idx++;\n            }\n        }\n\n        // Replace all Mult/Div expressions with a partial tree:\n        idx = 0;\n        expr = null;\n        while (idx < exprCopy.length) {\n            expr = exprCopy[idx];\n            if (expr instanceof MultDivExpression) {\n                if (idx === 0 || idx === exprCopy.length - 1) {\n                    throw new Error('Wrong operator position!');\n                }\n                expr.left = exprCopy[idx - 1];\n                expr.right = exprCopy[idx + 1];\n                exprCopy[idx - 1] = expr;\n                exprCopy.splice(idx, 2);\n            } else {\n                idx++;\n            }\n        }\n\n        // Replace all Plus/Minus expressions with a partial tree:\n        idx = 0;\n        expr = null;\n        while (idx < exprCopy.length) {\n            expr = exprCopy[idx];\n            if (expr instanceof PlusMinusExpression) {\n                if (idx === 0 || idx === exprCopy.length - 1) {\n                    throw new Error('Wrong operator position!');\n                }\n                expr.left = exprCopy[idx - 1];\n                expr.right = exprCopy[idx + 1];\n                exprCopy[idx - 1] = expr;\n                exprCopy.splice(idx, 2);\n            } else {\n                idx++;\n            }\n        }\n        if (exprCopy.length !== 1) {\n            throw new Error('Could not parse formula: incorrect syntax?');\n        }\n        return exprCopy[0];\n    }\n\n    isOperator(char: string | null) {\n        return typeof char === 'string' && char.match(/[+\\-*/^]/);\n    }\n\n    isOperatorExpr(expr: Expression) {\n        return (\n            expr instanceof PlusMinusExpression || expr instanceof MultDivExpression || expr instanceof PowerExpression\n        );\n    }\n\n    registerVariable(varName: string) {\n        if (this._variables.indexOf(varName) < 0) {\n            this._variables.push(varName);\n        }\n    }\n\n    getVariables() {\n        return this._variables;\n    }\n\n    /**\n     * Evaluates a Formula by delivering values for the Formula's variables.\n     * E.g. if the formula is '3*x^2 + 2*x + 4', you should call `evaulate` as follows:\n     *\n     * evaluate({x:2}) --> Result: 20\n     *\n     * @param {ValueObject|Array<ValueObject>} valueObj An object containing values for variables and (unknown) functions,\n     *   or an array of such objects: If an array is given, all objects are evaluated and the results\n     *   also returned as array.\n     * @return {Number|Array<Number>} The evaluated result, or an array with results\n     */\n    evaluate(valueObj: ValueObject | ValueObject[]): number | number[] {\n        // resolve multiple value objects recursively:\n        if (valueObj instanceof Array) {\n            return valueObj.map((v) => this.evaluate(v)) as number[];\n        }\n        let expr = this.getExpression();\n        if (!(expr instanceof Expression)) {\n            throw new Error('No expression set: Did you init the object with a Formula?');\n        }\n        if (this.options.memoization) {\n            let res = this.resultFromMemory(valueObj);\n            if (res !== null) {\n                return res;\n            } else {\n                res = expr.evaluate({ ...MATH_CONSTANTS, ...valueObj });\n                this.storeInMemory(valueObj, res);\n                return res;\n            }\n        }\n        return expr.evaluate({ ...MATH_CONSTANTS, ...valueObj });\n    }\n\n    hashValues(valueObj: ValueObject) {\n        return JSON.stringify(valueObj);\n    }\n\n    resultFromMemory(valueObj: ValueObject): number | null {\n        let key = this.hashValues(valueObj);\n        let res = this._memory[key];\n        if (res !== undefined) {\n            return res;\n        } else {\n            return null;\n        }\n    }\n\n    storeInMemory(valueObj: ValueObject, value: number) {\n        this._memory[this.hashValues(valueObj)] = value;\n    }\n\n    getExpression() {\n        return this.formulaExpression;\n    }\n\n    getExpressionString() {\n        return this.formulaExpression ? this.formulaExpression.toString() : '';\n    }\n\n    static calc(formula: string, valueObj: ValueObject | null = null, options = {}) {\n        valueObj = valueObj ?? {};\n        return new Formula(formula, options).evaluate(valueObj);\n    }\n}\n"],"names":[],"mappings":"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"}